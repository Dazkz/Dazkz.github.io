{"version":3,"sources":["Api/Api.js","components/Places/Places.js","components/InputPanel/InputPanel.js","components/app/App.js","serviceWorker.js","index.js"],"names":["Api","getPlaces","keyword","location","sortBy","fetch","headers","Authorization","then","res","json","jsonRes","businesses","Places","data","className","map","obj","href","url","src","image_url","alt","name","address1","city","state","zip_code","categories","title","rating","review_count","InputPanel","submitInput","useState","inputValue","setInputValue","sortByOptions","Rating","Object","keys","option","value","optionValue","key","onClick","placeholder","type","onChange","event","target","e","preventDefault","App","setData","places","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1865303.chunk.js","sourcesContent":["const code =\r\n  \"6mxW5yvHLvW0Sn69p_0R7sTZvjuR0IydEuIyWD0t_61NNM-k1HWQVP6WW7c58sIYcKxeWFCmwrSVph7Y3lnp1XDkmsZG5qjfFBz6FlOlxlOzIMKH9kQt4VWxgF6mXnYx\";\r\nconst Api = {\r\n  getPlaces(keyword, location, sortBy) {\r\n    return fetch(\r\n      `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${keyword}&location=${location}&sort_by=${sortBy}`,\r\n      {\r\n        headers: {\r\n          Authorization: `Bearer ${code}`,\r\n        },\r\n      }\r\n    ).then((res) => {\r\n      return res.json();\r\n    }).then((jsonRes) => {\r\n      if (jsonRes.businesses) {\r\n        return jsonRes.businesses;\r\n      }\r\n    })\r\n  },\r\n};\r\nexport default Api;\r\n","import React from 'react';\r\nimport \"./Places.css\";\r\n\r\nexport function Places({data}) {\r\n  return (\r\n    <div className=\"content\">\r\n      {   data.map(obj => {\r\n      return (\r\n        <div className=\"card\">\r\n          <a href={obj.url} className=\"card__image-container\">\r\n          <img className=\"card__image\" src={obj.image_url} alt=\"kekw\"></img>\r\n          </a>\r\n          <h2 className=\"card__name\">{obj.name}</h2>\r\n          <div className=\"card__info-container\">\r\n          <div className=\"card__address\">\r\n            <p>{obj.location.address1}</p>\r\n            <p>{obj.location.city}</p>\r\n            <p>{obj.location.state} {obj.location.zip_code}</p>\r\n          </div>\r\n          <div className=\"card__review\">\r\n            <h3>{obj.categories[0].title}</h3>\r\n            <h3 className=\"card__rating\">{obj.rating} stars</h3>\r\n            <p> Reviews: {obj.review_count}</p>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    })}\r\n    </div>\r\n  );\r\n}","import React, { useState } from \"react\";\r\nimport \"./InputPanel.css\";\r\n\r\nexport function InputPanel({ submitInput }) {\r\n  const [inputValue, setInputValue] = useState({\r\n    keyword: \"\",\r\n    location: \"\",\r\n    sortBy: \"best_match\",\r\n  });\r\n\r\n  const sortByOptions = {\r\n    \"Best match\": \"best_match\",\r\n    Rating: \"rating\",\r\n    \"Review count\": \"review_count\",\r\n  };\r\n  const assignClassName = (value) => {\r\n    if (value === inputValue.sortBy) {\r\n      return \"is_active\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  };\r\n\r\n  const renderSortOptions = () => {\r\n    return Object.keys(sortByOptions).map((option) => {\r\n      let optionValue = sortByOptions[option];\r\n      return (\r\n        <li\r\n          className={assignClassName(optionValue)}\r\n          key={optionValue}\r\n          onClick={() => {\r\n            setInputValue({\r\n              keyword: inputValue.keyword,\r\n              location: inputValue.location,\r\n              sortBy: optionValue,\r\n            });\r\n          }}\r\n        >\r\n          {option}\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <form className=\"input-panel\">\r\n      <div>\r\n        <ul className=\"input-panel__sort-options\">{renderSortOptions()}</ul>\r\n      </div>\r\n      <input\r\n        placeholder=\"What`s you`re looking for?\"\r\n        type=\"text\"\r\n        className=\"input-panel__keyword\"\r\n        name=\"keyword\"\r\n        onChange={(event) => {\r\n          setInputValue({\r\n            keyword: event.target.value,\r\n            location: inputValue.location,\r\n            sortBy: inputValue.sortBy,\r\n          });\r\n        }}\r\n      ></input>\r\n      <input\r\n        placeholder=\"Where is it?\"\r\n        type=\"text\"\r\n        className=\"input-panel__location\"\r\n        name=\"location\"\r\n        onChange={(event) =>\r\n          setInputValue({\r\n            keyword: inputValue.keyword,\r\n            location: event.target.value,\r\n            sortBy: inputValue.sortBy,\r\n          })\r\n        }\r\n      ></input>\r\n      <input\r\n        name=\"1\"\r\n        type=\"submit\"\r\n        className=\"input-panel__submit\"\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          submitInput(\r\n            inputValue.keyword,\r\n            inputValue.location,\r\n            inputValue.sortBy\r\n          );\r\n        }}\r\n      ></input>\r\n      <a\r\n        href=\"&\"\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          submitInput(\r\n            inputValue.keyword,\r\n            inputValue.location,\r\n            inputValue.sortBy\r\n          );\r\n        }}\r\n        className=\"input-panel__button\"\r\n      >\r\n        Here we go!\r\n      </a>\r\n    </form>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Api from \"../../Api/Api\";\nimport { Places } from \"../Places/Places\";\nimport { InputPanel } from \"../InputPanel/InputPanel\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const submitInput = (keyword, location, sortBy) => {\n    if (!!keyword & !!location === true) {\n    Api.getPlaces(keyword, location, sortBy).then((places) => {\n      setData(places);\n    });\n  }\n  };\n  return (\n    <section className=\"App\">\n      <header className=\"App__header\">CRINGE</header>\n      <InputPanel submitInput={submitInput}></InputPanel>\n      <Places data={data}></Places>\n      <footer className=\"App__footer\"></footer>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}